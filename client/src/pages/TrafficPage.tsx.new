// Import dependencies and components...

import { formatInvoiceData, exportToPdf } from '@/lib/pdfGenerator';

// Invoicing Tab for PDF export invoicing functionality
const InvoicingTab: React.FC = () => {
  const { 
    clients, 
    isLoadingClients,
    campaigns,
    isLoadingCampaigns,
    generateCampaignInvoice
  } = useTraffic();
  
  const [clientFilter, setClientFilter] = useState<number | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [invoiceData, setInvoiceData] = useState<{
    client: CommercialClient | null;
    campaign: CommercialCampaign | null;
    vatRate: number;
    discount: number;
    additionalInfo: string;
  }>({
    client: null,
    campaign: null,
    vatRate: 5,
    discount: 0,
    additionalInfo: ''
  });
  
  // Filter campaigns by client and search query
  const filteredCampaigns = campaigns
    .filter(campaign => !clientFilter || campaign.clientId === clientFilter)
    .filter(campaign => {
      if (!searchQuery) return true;
      const query = searchQuery.toLowerCase();
      const matchClient = clients.find(c => c.id === campaign.clientId);
      return (
        campaign.name.toLowerCase().includes(query) ||
        (matchClient && matchClient.name.toLowerCase().includes(query)) ||
        campaign.status.toLowerCase().includes(query)
      );
    });
  
  const handleGenerateInvoice = async () => {
    if (!invoiceData.campaign || !invoiceData.client) {
      return;
    }
    
    try {
      // Generate PDF using our PDF generator
      const formattedData = formatInvoiceData(
        invoiceData.client,
        invoiceData.campaign,
        invoiceData.vatRate,
        invoiceData.discount,
        invoiceData.additionalInfo
      );
      
      await exportToPdf(formattedData);
      
      // Also call the API endpoint to record the invoice in the system
      await generateCampaignInvoice(invoiceData.campaign.id);
      
      // Reset the form after generating the invoice
      setInvoiceData({
        client: null,
        campaign: null,
        vatRate: 5,
        discount: 0,
        additionalInfo: ''
      });
    } catch (error) {
      console.error('Error generating invoice:', error);
    }
  };
  
  const getClientName = (clientId: number) => {
    const client = clients.find(c => c.id === clientId);
    return client ? client.name : 'Unknown Client';
  };
  
  const calculateTotals = () => {
    if (!invoiceData.campaign) {
      return { subtotal: 0, vat: 0, discount: 0, total: 0 };
    }
    
    const spotCost = invoiceData.campaign.totalSpots * 100; // Assuming 100 per spot for demo
    const subtotal = spotCost;
    const discount = subtotal * (invoiceData.discount / 100);
    const afterDiscount = subtotal - discount;
    const vat = afterDiscount * (invoiceData.vatRate / 100);
    const total = afterDiscount + vat;
    
    return {
      subtotal: subtotal.toFixed(2),
      discount: discount.toFixed(2),
      vat: vat.toFixed(2),
      total: total.toFixed(2)
    };
  };
  
  const totals = calculateTotals();
  
  return (
    <div className="grid grid-cols-2 gap-6">
      {/* Left column - Invoice Generator */}
      <Card>
        <CardHeader>
          <CardTitle>Invoice Generator</CardTitle>
          <CardDescription>Create and export invoices for clients</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="clientSelect">Select Client</Label>
              <Select
                value={invoiceData.client?.id?.toString() || ''}
                onValueChange={(value) => {
                  const selectedClient = clients.find(c => c.id === parseInt(value));
                  setInvoiceData({
                    ...invoiceData,
                    client: selectedClient || null,
                    campaign: null // Reset campaign when client changes
                  });
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a client" />
                </SelectTrigger>
                <SelectContent>
                  {clients.map((client) => (
                    <SelectItem key={client.id} value={client.id.toString()}>
                      {client.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="campaignSelect">Select Campaign</Label>
              <Select
                value={invoiceData.campaign?.id?.toString() || ''}
                onValueChange={(value) => {
                  const selectedCampaign = campaigns.find(c => c.id === parseInt(value));
                  setInvoiceData({
                    ...invoiceData,
                    campaign: selectedCampaign || null
                  });
                }}
                disabled={!invoiceData.client}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a campaign" />
                </SelectTrigger>
                <SelectContent>
                  {campaigns
                    .filter(campaign => campaign.clientId === invoiceData.client?.id)
                    .map((campaign) => (
                      <SelectItem key={campaign.id} value={campaign.id.toString()}>
                        {campaign.name}
                      </SelectItem>
                    ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="vatRate">VAT Rate (%)</Label>
                <Input
                  id="vatRate"
                  type="number"
                  min="0"
                  max="100"
                  value={invoiceData.vatRate}
                  onChange={(e) => setInvoiceData({
                    ...invoiceData,
                    vatRate: parseFloat(e.target.value) || 0
                  })}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="discount">Discount (%)</Label>
                <Input
                  id="discount"
                  type="number"
                  min="0"
                  max="100"
                  value={invoiceData.discount}
                  onChange={(e) => setInvoiceData({
                    ...invoiceData,
                    discount: parseFloat(e.target.value) || 0
                  })}
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="additionalInfo">Additional Information</Label>
              <Textarea
                id="additionalInfo"
                placeholder="Payment details, terms and conditions, etc."
                value={invoiceData.additionalInfo}
                onChange={(e) => setInvoiceData({
                  ...invoiceData,
                  additionalInfo: e.target.value
                })}
                rows={3}
              />
            </div>
            
            {invoiceData.campaign && (
              <div className="border rounded-md p-4 space-y-3 bg-gray-50 dark:bg-gray-900">
                <h3 className="font-medium">Invoice Summary</h3>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div className="text-muted-foreground">Campaign:</div>
                  <div>{invoiceData.campaign.name}</div>
                  
                  <div className="text-muted-foreground">Spots:</div>
                  <div>{invoiceData.campaign.totalSpots}</div>
                  
                  <div className="text-muted-foreground">Subtotal:</div>
                  <div>${totals.subtotal}</div>
                  
                  <div className="text-muted-foreground">Discount ({invoiceData.discount}%):</div>
                  <div>-${totals.discount}</div>
                  
                  <div className="text-muted-foreground">VAT ({invoiceData.vatRate}%):</div>
                  <div>${totals.vat}</div>
                  
                  <div className="font-medium">Total:</div>
                  <div className="font-medium">${totals.total}</div>
                </div>
              </div>
            )}
            
            <Button 
              className="w-full" 
              onClick={handleGenerateInvoice}
              disabled={!invoiceData.campaign || !invoiceData.client}
            >
              <FileText className="h-4 w-4 mr-2" /> Generate PDF Invoice
            </Button>
          </div>
        </CardContent>
      </Card>
      
      {/* Right column - Campaign Listing */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex justify-between items-center">
            <CardTitle>Campaigns</CardTitle>
            <div className="flex space-x-2">
              <Select 
                value={clientFilter?.toString() || ''} 
                onValueChange={(val) => setClientFilter(val ? parseInt(val) : null)}
              >
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="All Clients" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">All Clients</SelectItem>
                  {clients.map((client) => (
                    <SelectItem key={client.id} value={client.id.toString()}>
                      {client.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
          <div className="flex mt-2">
            <Input
              placeholder="Search campaigns or clients..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="max-w-sm"
            />
          </div>
        </CardHeader>
        <CardContent className="p-0">
          {isLoadingCampaigns ? (
            <div className="flex justify-center p-6">
              <p>Loading campaigns...</p>
            </div>
          ) : filteredCampaigns.length === 0 ? (
            <div className="flex flex-col items-center justify-center p-6 text-center">
              <FileText className="h-8 w-8 text-muted-foreground mb-2" />
              <p className="text-muted-foreground mb-3">No campaigns found</p>
            </div>
          ) : (
            <ScrollArea className="h-[calc(100vh-20rem)]">
              <div className="divide-y">
                {filteredCampaigns.map((campaign) => (
                  <div 
                    key={campaign.id} 
                    className="p-4 hover:bg-accent/50 cursor-pointer"
                    onClick={() => {
                      const client = clients.find(c => c.id === campaign.clientId);
                      setInvoiceData({
                        ...invoiceData,
                        client: client || null,
                        campaign
                      });
                    }}
                  >
                    <div className="flex justify-between">
                      <div>
                        <h4 className="font-medium">{campaign.name}</h4>
                        <p className="text-sm text-muted-foreground">{getClientName(campaign.clientId)}</p>
                      </div>
                      <div className="flex flex-col items-end">
                        <Badge variant={
                          campaign.status === 'active' ? 'default' :
                          campaign.status === 'completed' ? 'secondary' :
                          campaign.status === 'pending' ? 'outline' : 'destructive'
                        }>
                          {campaign.status}
                        </Badge>
                        <span className="text-sm mt-1">
                          {campaign.totalSpots} spots
                        </span>
                      </div>
                    </div>
                    <div className="flex mt-2 justify-between text-xs text-muted-foreground">
                      <span>
                        {format(new Date(campaign.startDate), 'MMM d, yyyy')} - 
                        {format(new Date(campaign.endDate), 'MMM d, yyyy')}
                      </span>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-6 px-2" 
                        onClick={(e) => {
                          e.stopPropagation();
                          
                          // Get client data
                          const client = clients.find(c => c.id === campaign.clientId);
                          if (client) {
                            // Generate and download PDF invoice
                            const formattedData = formatInvoiceData(
                              client,
                              campaign,
                              5, // Default VAT rate
                              0, // Default discount
                              '' // No additional info
                            );
                            
                            exportToPdf(formattedData)
                              .then(() => {
                                // Also call the API endpoint to record the invoice
                                generateCampaignInvoice(campaign.id);
                              })
                              .catch((error) => {
                                console.error('Error generating quick invoice:', error);
                              });
                          }
                        }}
                      >
                        <FileText className="h-3 w-3 mr-1" /> Invoice
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </ScrollArea>
          )}
        </CardContent>
      </Card>
    </div>
  );
};